<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi,Kyson</title>
  
  <subtitle>Android Developer</subtitle>
  <link href="https://hikyson.cn/atom.xml" rel="self"/>
  
  <link href="https://hikyson.cn/"/>
  <updated>2021-02-11T07:29:59.382Z</updated>
  <id>https://hikyson.cn/</id>
  
  <author>
    <name>Kyson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开篇</title>
    <link href="https://hikyson.cn/2021/02/10/%E5%BC%80%E7%AF%87/"/>
    <id>https://hikyson.cn/2021/02/10/%E5%BC%80%E7%AF%87/</id>
    <published>2021-02-10T07:47:19.000Z</published>
    <updated>2021-02-11T07:29:59.382Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章算是给自己一个新的起点，回顾过去7年的工作，学习颇多，感悟颇多，但似乎总结不多，就算偶尔记录一些，也都是零零碎碎不成文章，有人说“做一件事情最好的时间是十年前，其次是现在”，所以我想，就从现在开始，新开这个博客，会在这里中主要记录过去这么多年的积累，整理总结一些技术点，比如Android性能优化，JVM，Android Framework，Linux Kernel，还可能会有些网络相关等等，都是过去几年自己Focus的点，另外也会有一些对技术和管理方面的思考，如果能够在总结自身的同时带给读者一些益处，那就更好了</p><p>记得大学时期花了家里2300块买了一个Android Nexus S曲面屏手机，从第一眼看到就被深深吸引，于是一次机会，做了个Android 4.0 Holo风格的文件浏览器，代码比较简单，说白了就是用各种File API，那时候Android权限管理不严格，所以很多文件都是可以访问的，倒也没有遇到太多问题。后来陆陆续续做了几个简陋的App上传到了应用市场，那时候应用市场雨后春笋，几年时间国内就几十家，这些年被Google Play和几个头部厂商的商店基本蚕食，这是后话。当时几个App获取了不小的下载量，后来回想起来，这个时候Android方兴未艾，是创业的最好时机，不过当时视野局限，很难意识到自己是风口上的猪</p><p>毕业以后开始在一家公司做Android的游戏应用市场，游戏分发的平台在那时候处于起步，也算火热，公司虽然不算行业头部，倒也没有什么压力</p><p>刚毕业充满热情，孜孜不倦，带我的师父能力很强，记得当时几天的时间就把下载框架搞定了，各种多线程操作、断点续传、Handler操作玩的666，所以在我眼里，这就是我要追赶的人。公司规模不大，主营的Android App客户端也就4、5个同学开发，所以也没有分什么垂直业务，基本上所有的页面都会写一些，不过对技术的认知浅薄，有一阵子把整个网络请求的业务代码自认为地重构了一番，整个继承4、5层，继承关系梳理地滴水不漏，自认为代码水平已经很强了，多年以后当我读到《代码整洁之道》，再回顾那时候的重构，一下子明白了我的Leader看到我重构后的代码开玩笑说的那句 “这些继承类写得很溜，不过要实我就一把梭”，理解了代码的组合和继承的优劣、业务代码中面向对象和面向过程编码的优劣</p><p>那时候的公司很多还是965，所以有大把的时间自己分配，虽然还是会玩大学时期的游戏，不过还是做了两件有意义的事情，虽然没有得到多少物质上的回报，不过一定程度上也拓宽了一些代码以外的认知</p><ol><li>写了一些开源项目</li><li>长期维护了一个产品</li></ol><p>13、14年Android开源项目中涌现了大量的自定义View，处理一下View的宽高，定义一下绘制方式再处理一下手势就可以了，所以赶了个潮流，仿照某网站的Loading动画写了一个自定义的Loading View <a class="link"   href="https://github.com/Kyson/WhorlView" >WhorlView<i class="fas fa-external-link-alt"></i></a>，代码很简单，就一个类，不过发出去没多久就收获了100多个Star，给我狠狠虚荣了一把，这里涉及到一个问题，那就是除了虚荣，开源能给我带来什么？<!-- // TODO KYSON --></p><p>另外在这段时间，我花了两年的业余时间维护了一个日程管理类的App，当时的目的很简单，就是给新的技术框架练练手，顺便感受一下创业过程，当然最重要的是做一个真正自己都想用的日程管理产品。大概迭代了三个大版本，多少小版本已经记不清了，整个研发流程虽然简陋，倒也五脏俱全。从需求、产品设计、编码测试、上线运营都由我一个人完成。</p><p>收集用户反馈的方式是我在App很显眼的位置加了个反馈功能，现在的移动互联网产品通常会把这种功能放在三级甚至更深的入口，个人认为很大程度上因为产品同学更相信入口带来的流量而容易忽视用户真实的反馈吧。用户反馈多的时候一天也能收到十几条，说什么的都有，这大概是我离用户最近的一次，加上自己对产品功能的直觉，收集大概一个月后就立项，开始画产品原型，一般就画个草图就可以，毕竟产品功能还是比较直接</p><!-- // TODO KYSON --><blockquote><p>现在的产品经理在研发过程中通常有一套固定思路，功能灰度上线，做AB，看数据，定结论，一个功能需要同时做几套方案，后期根据用户的反馈再适当调整</p></blockquote><p>前后做了2年。更了两个大版本，不知道多少小版本</p><p>练手是因为当时安卓技术更新迭代频繁，我需要用最新的组件，最新的设计，最新的技术。那时候开始了metiarial design，出了很多新组建，基础框架也开始了okhttp retrofit等等。</p><p>而我在整个appi的运营过程中也了解了一些技术以外的东西，</p><p>从</p><p>产品原型axure自己画，当然没有现在的产品这么专业，产品和使用流程基本靠直觉。那时候接入的一些第三方服务可以埋点，但并不好用。以至于后来的数据我都没怎么关注。ab test也没用上过。</p><p>ui设计，这个点想对而言门槛比较高，需要有好的设计感觉，恰好我没有。。所以基本上整体风格用的组件原生的，图片和icon从其他app上扒。</p><p>编码，就是使用各种开源软件，因为练手是目的之一，所以也是不着急上架，一直在采用最新的技术。后端一开始用saas服务，一些免费的，基本上也够用。至于后来买了阿里云打算重构，但由于时间问题无法继续。</p><p>测试就不用说了，基本靠手，边开发边调试也就算测过了，当然那时候有几个免费的自动化测试网站，不过可用度不高，就当monkey用用，测一些崩溃什么的。线上的崩溃也用的免费第三方服务。</p><p>那时候开始搭建了自己的博客，由于那时候市场匮乏安卓的技术内容，所以即使我只是写一些很简单的，也还是收获了一些博客读者。当然基于wordpress搭建的博客seo也还可以</p><p>再后来因为工作太轻松？？？学习缓慢，换了工作来上海，新公司的部门处于起步阶段，的工作强度一下子很难跟上，好在自己年轻的身体还算可以，抗了下来。但是之前维护的app，开源项目就停了。不得不说，965的工作时间太轻松了。</p><p>工作内容现在看起来和前几年没什么区别，写一些业务，但是毕竟积累了几年经验，所以对一些技术上的问题很严格，和后端的服务和产品ui同学免不了争执。这个时候似乎产品也就是看看数据，加上自己的一些认知和直觉在做事，回头想想也并不很专业。不过也是，起步阶段的功能缺失太严重，基本上就是在补齐缺失的业务功能，至于优化就别提了。</p><p>部门在公司的地位一直很低，所以基本上是一帮人自己在玩，不过也算是一步步稳扎稳打，所以后来因为体量大了一些，还拆分了业务团队。我被分到了基础组，开始了架构的学习</p><p>一次偶然的想法，写了一个读取cpu和内存的demo，一开始写了一个开源项目，悬浮窗上显示当前的内存。后来一步步完善，成了现在的AndroidGodEye 项目。整合了很多性能相关的功能，希望能给大家的项目带来一些优化。而最近，我开始重新审视了性能优化这件事，在公司完成了一些更有意义和价值的项目，个人对性能这件事情也有了更深刻的理解。希望后续可以另外开一篇文章讲讲</p><p>公司18年迎来转机，集团战略调整，部门一下子就重要了起来。组内的事情一下子忙了起来，要做的事情太多了。当时负责带安卓的基础架构组，当时负责的项目包括 路由，网络框架，启动，apm，甚至还有市场的一些跳转，预装，应用市场评分，等等，还有各种底层框架，可以说出了几条业务线，其他部分都要管。</p><p>不过就在那个时候，个人也提出了离职。实际上原因还是希望能够换个环境证明自己，给自己未来留条出路吧。</p><p>所以基本上我的学习思路是，不希望被一家公司的业务捆绑，所以都是学习的一些通用技术，矛盾的是，一方面我有这样的想法，另一方面，我也会因为离用户太远，产生了一种焦虑心理，到底这种学习可不可靠？技术为用户服务的理念到底怎么去实践？所以中间做了几次尝试，尽可能把自己做的基础框架和用户和业务绑定，和公司其他团队调研一些性能指标和用户体验的关联，推动一些应用市场反馈和优化appsize的项目。实际上这些尝试在心里是抱怀疑态度，不过结果还算理想，至于数据到底有没有骗人，坦白说，我也说不清。</p><p>这段时间一边带着团队，一边做着项目，虽然制定了一些目标，但心底还是打鼓。当然还有一些外部环境的因素。看不到团队的出路，自己也是在管理和技术上游离不定，加上家庭的不稳定因素，以至于学习状态的下滑，这个状态持续了半年多，奠定了我后续离开的基础。</p><p>2020年下半年，终于还是从4年的公司里离开。开始新的征程，在新环境里，我开始专注技术，周围的同学有不少是一个方面的技术专家，所以技术的成长很快。我想，是时候重新开始自己的征程。所以2021年开始，重新开启博客，主要记录过去这么多年积累，对技术和管理的思考，整理总结一些技术点，主要集中在jvm，Android framework，Linux kernel，可能会有些网络编程，Android性能优化。</p><p>就当重新来过，对自己的检阅，不忘初心。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇文章算是给自己一个新的起点，回顾过去7年的工作，学习颇多，感悟颇多，但似乎总结不多，就算偶尔记录一些，也都是零零碎碎不成文章，有人说“做一件事情最好的时间是十年前，其次是现在”，所以我想，就从现在开始，新开这个博客，会在这里中主要记录过去这么多年的积累，整理总结一些技术</summary>
      
    
    
    
    
  </entry>
  
</feed>
